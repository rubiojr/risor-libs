import os
import regexp
import exec

// Logs a message to standard output
//
// Parameters:
// - msg: The message to log
//
// @global.function
func log(msg) {
  print(msg)
}

// Logs a debug message when RSX_DEBUG environment variable is set to "1"
//
// Parameters:
// - msg: The debug message to log
//
// @global.function
func debug(msg) {
  if os.getenv("RSX_DEBUG") == "1" {
    print('DEBUG: {msg}')
  }
}

// Executes a shell command and returns its output
//
// Parameters:
// - command: The shell command to execute
//
// Returns: The combined stdout and stderr output as a string
//
// @global.function
func shell(command) {
  cmd := exec.command(["bash", "-c", command])
  buf := buffer()
  cmd.stderr = buf
  cmd.stdout = buf
  cmd.env = os.environ()
  err := false
  try(func() {
    cmd.run()
  }, func() { err = true })

  if err {
    debug(string(buf))
    error('error {string(buf)}')
  }

  return string(buf)
}
// Alias for shell function
//
// Parameters:
// - command: The shell command to execute
//
// Returns: The combined stdout and stderr output as a string
//
// @global.function
func sh(command) { return shell(command) }

// Gets an environment variable with a default value
//
// Parameters:
// - key: The environment variable name
// - def: The default value if the variable is not set
//
// Returns: The value of the environment variable or the default value
//
// @global.function
func env(key, def) {
  v := os.getenv(key)
  if v == "" {
    v = def
  }
  return v
}

// Checks if a path is a file
//
// Parameters:
// - target: The path to check
//
// Returns: Boolean indicating whether the target is a file
//
// @global.function
func is_file(target) {
  if strings.contains(target, "\n") {
    return false
  }

  try(func() { f := os.stat(target); !f.is_dir }, false)
}

// Checks if a path is a directory
//
// Parameters:
// - target: The path to check
//
// Returns: Boolean indicating whether the target is a directory
//
// @global.function
func is_dir(target) {
  try(func() { f := os.stat(target); f.is_dir }, false)
}

// Splits content into lines, handling both strings and files
//
// Parameters:
// - content: A string or file path to split into lines
//
// Returns: An array of lines
//
// @global.function
func lines(content) {
  if len(content.split("\n")) > 1 {
    return content.split("\n")
  }

  if is_file(content) {
    return string(os.read_file(content)).split("\n")
  }
  return content.split("\n")
}

// Replace occurrences of a regular expression in a file or string
//
// Parameters:
// - target: The file path or string to process
// - rgxp: The regular expression pattern to match
// - repl: The replacement string
//
// Returns: The modified content as a string
//
// @global.function
func replace_in(target, rgxp, repl) {
  l := []
  r := regexp.compile(rgxp)
  lines(target).each(func(line){
    if r.match(line) {
      l.append(r.replace_all(line, repl))
    } else {
      l.append(line)
    }
  })
  content := strings.join(l, "\n")
  if is_file(target) {
    os.write_file(target, content)
  }
  return content
}


// Find lines in a file or string that match a regular expression
//
// Parameters:
// - target: The file path or string to search
// - regex: The regular expression pattern to match
//
// Returns: An array of matching lines
//
// @global.function
func grep(target, regex) {
  l := []
  lines(target).each(func(line){
    if regexp.match(regex, line) {
      l.append(line)
    }
  })

  return l
}

// Load a module from a GitHub repository
//
// Parameters:
// - path: The GitHub repository path in format "gh:owner/repo/path/to/file.risor"
// - opts: Options for loading the module
//   - force: Force module download if present (default: false)
//   - branch: Repository branch to use (default: "main")
//   - install_path: Path to install the module (default: $HOME/.local/share/risor/modules)
//
// Returns: Boolean indicating whether the module was downloaded or already existed
//
// @global.function
__module_dir := filepath.join(os.getenv("HOME"), ".local/share/risor/modules")
func load(path, opts) {
  install_path := opts.get("install_path", __module_dir)
  os.mkdir_all(install_path)

  debug("install path: "+install_path)

  branch := opts.get("branch", "main")
  debug("branch: "+branch)

  force := opts.get("force", false)
  if !regexp.match(`gh:(\w|-|_)+\/(\w|-|_)+\/.*`, path) {
    error("invalid path")
  }
  nwo := strings.split(path, "/")[0:2]
  nwo = strings.join(nwo, "/").replace_all("gh:", "")
  debug("nwo: "+nwo)

  lib_path := strings.split(path, "/")[2:]
  lib_path = strings.join(lib_path, "/")
  lib_path = strings.trim_suffix(lib_path, ".risor")
  lib_path = lib_path + ".risor"
  debug("library path: "+lib_path)

  dest := filepath.join(install_path, filepath.base(path))
  dest = strings.trim_suffix(dest, ".risor")
  dest = dest + ".risor"

  if is_file(dest) && !force {
    debug(sprintf("%s already exists, ignoring", filepath.base(dest)))
    return false
  }

  if is_file(dest) && force {
    debug(sprintf("library %s, force requested", filepath.base(dest)))
  }

  resp := fetch('https://raw.githubusercontent.com/{nwo}/refs/heads/{branch}/{lib_path}')
  if resp.status_code != 200 {
    error('failed to fetch the library from {path}, status code {resp.status_code}')
  }
  f := os.create(dest)
  defer f.close()

  f.write(resp.text())
  debug(sprintf("library %s installed", filepath.base(dest)))
  return true
}
