import color
import exec
import regexp
import os
import uuid

__fatal := false
__raises := false

_red := color.color(color.fg_red, color.bold)
_green := color.color(color.fg_green, color.bold)

// Sets whether test failures are fatal (exit the program)
//
// Parameters:
// - b: Boolean indicating if failures should be fatal
//
// @global.function
failed_is_fatal := func(b) {
  __fatal = b
}

_last_error := nil
// Internal use only, to self-test this library
//
// @global.function
failed_raises := func() {
  __raises = true
}
// Internal use only, to self-test this library
//
// @global.function
failed_does_not_raise := func() {
  __raises = false
}

_raised_error := errors.new("error raised")

// Exit the program if __fatal is true
//
// @global.function
func exit_if_fatal() {
  if __fatal {
    os.exit(1)
  }
}

// Print a message in green.
//
// Parameters:
// - desc: The test description
//
// @global.function
func print_ok(desc) {
  if desc != "" {
    print(_green.sprintf('%s:', "  ok"), desc)
  }
}

// Print a message in red.
//
// Parameters:
// - desc: The test description
//
// @global.function
func print_fail(desc) {
  if __raises {
    error(desc)
  }
  print(_red.sprintf('%s:', "fail"), desc)
  exit_if_fatal()
}

// Assert that a condition is true.
//
// Parameters:
// - desc: The test description
// - cond: The condition to check (boolean)
//
// @global.function
func is_true(desc, cond){
  if !cond {
    print_fail(desc)
  } else {
    print_ok(desc)
  }
}

// Assert that a condition is false.
//
// Parameters:
// - desc: The test description
// - cond: The condition to check (boolean)
//
// @global.function
func is_false(desc, cond){
  if cond {
    print_fail(desc)
  } else {
    print_ok(desc)
  }
}

// Assert that two values are equal.
//
// Parameters:
// - desc: The test description
// - o1: First value to compare
// - o2: Second value to compare
//
// @global.function
func equals(desc, o1, o2) {
  if o1 == o2 {
    print_ok(desc)
  } else {
    print_fail(desc + ' (expected: {o1}, got: {o2})')
  }
}

// Assert a condition raises an error.
//
// Parameters:
// - desc: The test description
// - fn: The function that should raise an error
// - err: The error that should be raised (default: any error)
//
// @global.function
func raises(desc, fn, err="") {
  processed := false
  o := try(fn, func(e) {
    processed = true
    if e != err{
      print_fail(desc + '(expected: {err}, got: {e})')
    } else {
      print_ok(desc)
    }
  }, func(e) {
    print_ok(desc)
  })

  if o == nil && !processed {
    print(sprintf("%s %s", _red.sprintf('%s:', "fail"), desc))
  }
}

// Assert a condition does not raise an error.
//
// Parameters:
// - desc: The test description
// - fn: The function that should not raise an error
//
// @global.function
func nothing_raised(desc, fn) {
  happened := nil
  try(fn, func(e) {
    happened = e
  })
  if happened {
    error(sprintf("%s %s", _red.sprintf('%s:', "fail"), desc))
  } else {
    print_ok(desc)
  }
}

// Assert that command output equals an expected string.
//
// Parameters:
// - desc: The test description
// - cmd: The command to run
// - expected: The expected output
//
// @global.function
func stdout_equals(desc, cmd, expected) {
  tokens := cmd.split(" ")
  bin := tokens[0]
  args := []
  if len(tokens) > 1 {
    args.extend(tokens[1:])
  }

  try(func() {
    out := exec(bin, args)
    if out.stdout != expected {
      errors.new(desc + ' (expected: {expected}, got: {out})')
    } else {
      print_ok(desc)
    }
  }, func(e) {
    print_fail(desc + ' (error: {e})')
  })

}

// Assert that command stderr output matches a regular expression.
//
// Parameters:
// - desc: The test description
// - cmd: The command to run
// - reg: The regular expression to match
//
// @global.function
func stderr_matches(desc, cmd, reg) {
  tokens := cmd.split(" ")
  bin := tokens[0]
  args := [bin]
  if len(tokens) > 1 {
    args.extend(tokens[1:])
  }

  try(func() {
    res := exec(args)
    if regexp.match(reg, res.stderr) {
      print_ok(desc)
    } else {
      error('"{res.stderr}" does not match "{reg}"')
    }
  }, func(e) {
    print_fail(desc + ' (error: {e})')
  })
}

// Assert that command output matches a regular expression.
//
// Parameters:
// - desc: The test description
// - cmd: The command to run
// - reg: The regular expression to match
//
// @global.function
func stdout_matches(desc, cmd, reg) {
  tokens := cmd.split(" ")
  bin := tokens[0]
  args := [bin]
  if len(tokens) > 1 {
    args.extend(tokens[1:])
  }

  try(func() {
    res := exec(args)
    if regexp.match(reg, res.stdout) {
      print_ok(desc)
    } else {
      error('"{res.stdout}" does not match "{reg}"')
    }
  }, func(e) {
    print_fail(desc + ' (error: {e})')
  })
}

// Assert that a path is a directory.
//
// Parameters:
// - desc: The test description
// - path: The path to check
//
// @global.function
func is_dir(desc, path) {
  ok := try(func() { f := os.stat(path); f.is_dir }, false)
  if ok {
    print_ok(desc)
  } else {
    print_fail(desc)
  }
}

// Assert that a path is a file.
//
// Parameters:
// - desc: The test description
// - path: The path to check
//
// @global.function
func is_file(desc, path) {
  ok := try(func() { f := os.stat(path); f.mode.is_regular }, false)
  if ok {
    print_ok(desc)
  } else {
    print_fail(desc)
    //error(raised_error)
  }
}

// Create a temporary directory and run a function with it.
// The directory created is automatically removed after the function is run.
//
// Parameters:
// - fn: The function to run with temporary directory path as argument
//
// Returns: The result of the function execution
//
// @global.function
func with_temp_dir(fn) {
  tmp_dir := filepath.join(os.temp_dir(), uuid())
  os.mkdir_all(tmp_dir)
  defer os.remove_all(tmp_dir)
  return fn(tmp_dir)
}
