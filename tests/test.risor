import test
import filepath
import os

test.failed_raises()

test.stdout_equals("output is bar", "echo bar", "bar\n")

test.equals("foo == foo", "foo", "foo")
test.equals("comparing integers works", 1, 1)
test.raises("foo == bar should raise", func() {
  test.equals("foo == bar", "foo", "bar")
})


test.nothing_raised("no-op should not raise", func() {
  ""
})
test.raises("nothing_raised fails when test raises", func() {
  test.nothing_raised("", func() {
    error("foo")
  })
})

test.is_true("is_true should not fail with true", true)
test.is_true("is_true should not fail when expresion returns true", "foo" == "foo")
test.raises("is_true with false should false", func() {
  test.is_true("false is true", false)
})

test.stdout_matches("echo foo matches foo", "echo foo", "^foo.*")
test.raises("is_true with false should false", func() {
  test.stdout_matches("echo foo does not match bar", "echo foo", "bar")
})

test.is_dir('{os.temp_dir()} is a directory', os.temp_dir())
tmp_file := uuid()
test.raises('random file {tmp_file} is not a directory', func() {
  test.is_dir("", tmp_file)
})

tmp_file = filepath.join(os.temp_dir(), uuid())
f := os.create(tmp_file)
f.close()
test.is_file('{tmp_file} is a file', tmp_file)
test.raises('{os.temp_dir()} is not a file', func() {
  test.is_file("", os.temp_dir())
})

tdir := ""
test.with_temp_dir(func(temp_dir) {
  tdir = temp_dir
  test.is_dir('temp dir {temp_dir} exists', temp_dir)
})
test.raises('{tdir} does not exist', func() {
  test.is_dir("", tdir)
})
